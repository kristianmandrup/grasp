// Generated by LiveScript 1.5.0
(function(){
  var levn, makeQuery, filterRegex, getArgs, hasFilter, parseFilters, getFilters, queryResults, getOrigResults, getRaw, slice$ = [].slice;
  levn = require('levn');
  makeQuery = function(queryEngine, node){
    return function(selector, backupSelector){
      var e;
      try {
        return queryEngine.query(selector, node);
      } catch (e$) {
        e = e$;
        return queryEngine.query(backupSelector, node);
      }
    };
  };
  filterRegex = /\s+\|\s+([-a-zA-Z]+)((?:\s+(?:'(?:\\'|[^'])*'|"(?:\\"|[^"])*"|[^\|\s]+))*)/;
  getArgs = function(filters){
    var argsStr;
    argsStr = filters.shift().trim();
    argsStr += filters.shift();
    return levn.parse('Array', argsStr);
  };
  hasFilter = function(txt){
    return /^\s*\|\s+/.test(txt);
  };
  parseFilters = function(filterStr){
    var ref$, filters, selector;
    if (hasFilter(filterArg)) {
      return ref$ = (" " + filterArg.trim()).split(filterRegex), filters = slice$.call(ref$, 1), ref$;
    } else {
      return ref$ = filterArg.trim().split(filterRegex), selector = ref$[0], filters = slice$.call(ref$, 1), ref$;
    }
  };
  getFilters = function(filterArg){
    if (Array.isArray(filterArg)) {
      filterArg;
    }
    return parseFilters(filterArg);
  };
  queryResults = function(node, selector){
    var that, ref$;
    if (that = (ref$ = node._named) != null ? ref$[selector] : void 8) {
      return function(){
        return [].concat(that);
      };
    } else {
      return function(replacementArg){
        var query;
        query = makeQuery(queryEngine, node);
        return query(selector, replacementArg);
      };
    }
  };
  getOrigResults = function(node, selector, filterArg){
    if (hasFilter(filterArg)) {
      return function(){
        return [node];
      };
    } else {
      return queryResults(node(selector));
    }
  };
  getRaw = function(input, node){
    var raw, that;
    raw = (that = node.raw)
      ? that
      : node.start != null
        ? input.slice(node.start, node.end)
        : node.key != null && node.value != null ? input.slice(node.key.start, node.value.end) : '';
    node.raw = raw;
    return (node.rawPrepend || '') + "" + raw + (node.rawAppend || '');
  };
  module.exports = {
    getRaw: getRaw,
    getOrigResults: getOrigResults,
    parseFilters: parseFilters
  };
}).call(this);
