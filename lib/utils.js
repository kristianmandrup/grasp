// Generated by LiveScript 1.5.0
(function(){
  var fs, searchTarget, getQueryEngine, getDisplayFilename;
  fs = require('fs');
  searchTarget = function(basePath, upPath){
    return function(target, done){
      var output, targetPath, stat, fileContents, displayPath, e, this$ = this;
      try {
        if (target === '-') {
          if (!stdin) {
            throw new Error('Error: stdin not defined.');
          }
          targetPaths.push('-');
          output = '';
          stdin.setEncoding('utf-8');
          stdin.on('data', (function(it){
            return output += it;
          }));
          stdin.on('end', function(){
            var e;
            try {
              search('(standard input)', output);
            } catch (e$) {
              e = e$;
              console.error(e.message);
            }
            return done();
          });
          stdin.resume();
        } else {
          targetPath = path.resolve(upPath, target);
          stat = fs.lstatSync(targetPath);
          if (stat.isDirectory() && options.recursive) {
            async.eachSeries(fs.readdirSync(targetPath), searchTarget(basePath, targetPath), function(){
              return async.setImmediate(function(){
                return done();
              });
            });
          } else if (stat.isFile() && testExt(target) && testExclude(target, basePath, upPath)) {
            fileContents = fs.readFileSync(targetPath, 'utf8');
            displayPath = path.relative(basePath, targetPath);
            targetPaths.push(displayPath);
            search(displayPath, fileContents);
            done();
          } else {
            done();
          }
        }
      } catch (e$) {
        e = e$;
        console.error(e.message);
        done();
      }
    };
  };
  getQueryEngine = function(options){
    if (options.engine != null) {
      return require(options.engine);
    } else if (options.squery) {
      return squery;
    } else if (options.equery) {
      return equery;
    } else {
      return squery;
    }
  };
  getDisplayFilename = function(options, targets){
    var that, isDir, e;
    if ((that = options.filename) != null) {
      return options.displayFilename = that;
    } else if (targets.length > 1) {
      return options.displayFilename = true;
    } else {
      try {
        isDir = targets[0] === '-'
          ? false
          : fs.lstatSync(targets[0]).isDirectory();
        if (isDir && !options.recursive) {
          console.warn("'" + targets[0] + "' is a directory. Use '-r, --recursive' to recursively search directories.");
        }
        return options.displayFilename = isDir;
      } catch (e$) {
        e = e$;
        error("Error: No such file or directory '" + targets[0] + "'.");
        exit(2);
      }
    }
  };
  module.exports = {
    searchTarget: searchTarget,
    getQueryEngine: getQueryEngine,
    getDisplayFilename: getDisplayFilename
  };
}).call(this);
