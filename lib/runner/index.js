// Generated by LiveScript 1.5.0
(function(){
  var version, ref$, searchTarget, getQueryEngine, getDisplayFilename, Logger, Search, Handlers, Setters, Debug, Args, Selector, _console, _fs, _tf, Runner;
  version = require('../package.json').version;
  ref$ = require('./utils'), searchTarget = ref$.searchTarget, getQueryEngine = ref$.getQueryEngine, getDisplayFilename = ref$.getDisplayFilename;
  Logger = require('../logger');
  Search = require('../search');
  Handlers = require('./handlers');
  Setters = require('./setters');
  Debug = require('./debug');
  Args = require('./args');
  Selector = require('./selector');
  Search = require('./search');
  _console = console;
  _fs = require('fs');
  _tf = require('cli-color');
  Runner = (function(){
    Runner.displayName = 'Runner';
    var prototype = Runner.prototype, constructor = Runner;
    importAll$(prototype, arguments[0]);
    importAll$(prototype, arguments[1]);
    importAll$(prototype, arguments[2]);
    importAll$(prototype, arguments[3]);
    importAll$(prototype, arguments[4]);
    importAll$(prototype, arguments[5]);
    importAll$(prototype, arguments[6]);
    function Runner(arg$){
      var ref$, ref1$;
      ref$ = arg$ != null
        ? arg$
        : {}, this.opts = ref$.opts, this.args = ref$.args, this.error = (ref1$ = ref$.error) != null
        ? ref1$
        : function(it){
          throw new Error(it);
        }, this.callback = (ref1$ = ref$.callback) != null
        ? ref1$
        : function(){}, this.exit = (ref1$ = ref$.exit) != null
        ? ref1$
        : function(){}, this.data = (ref1$ = ref$.data) != null ? ref1$ : false, this.stdin = ref$.stdin, this.fs = (ref1$ = ref$.fs) != null ? ref1$ : _fs, this.textFormat = (ref1$ = ref$.textFormat) != null ? ref1$ : _tf, this.input = ref$.input, this.console = (ref1$ = ref$.console) != null ? ref1$ : _console;
      this.validateArgs();
      this.parseArgs();
      this.extractOpts();
      this.startDebug();
      this.handleAll();
      this.setAll();
      this.prepareSearch();
      this.parseSelector();
      this.endDebug();
    }
    run(function(){
      return this.doSearch();
    });
    excludeFun(function(){
      var this$ = this;
      return function(file, basePath, upPath){
        var filePath;
        filePath = path.relative(basePath, path.join(upPath, file));
        return this$.exclude.every(function(excludePattern){
          return !minimatch(filePath, excludePattern, this.options.minimatchOptions);
        });
      };
    });
    getHelp(function(){
      return this.help(generateHelp, generateHelpForOption, this.positional, {
        version: version
      });
    });
    return Runner;
  }(Logger, Handlers, Setters, Debug, Args, Selector, Search));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
