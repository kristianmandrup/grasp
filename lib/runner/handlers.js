// Generated by LiveScript 1.5.0
(function(){
  module.exports = [
    handlerAll(function(){
      this.handleVersion();
      this.handleHelp();
      this.handleJsx();
      this.handleFile();
      this.handleRecursive();
      this.handleReplace();
      return this.handleSelector();
    }), handleJsx(function(){
      if (!this.options.jsx) {
        return;
      }
      this.options.extensions.push('jsx');
      if (this.options.parser[0] === 'acorn') {
        require('acorn-jsx');
        return this.options.parser[1].plugins = {
          jsx: true
        };
      }
    }), handleVersion(function(){
      var versionString;
      if (!this.options.version) {
        return;
      }
      versionString = "grasp v" + version;
      this.callback(versionString);
      this.exit(0, versionString);
    }), handleFile(function(){
      if (this.options.file != null) {
        return this.selectorFromFile();
      } else {
        return this.selectorFromPos();
      }
    }), handleHelp(function(){
      var helpString;
      if (!this.options.help) {
        return;
      }
      helpString = this.getHelp();
      this.callback(helpString);
      this.exit(0, helpString);
    }), handleRecursive(function(){
      if (!this.targets.length) {
        return this.targets = options.recursive
          ? ['.']
          : ['-'];
      }
    }), handleSelector(function(){
      if (this.selector == null) {
        this.error('Error: No selector specified.');
        this.helpString = this.getHelp();
        this.callback(this.helpString);
        this.exit(2, this.helpString);
      }
    }), handleReplaceFile(function(){
      var e;
      if (!this.options.replaceFile) {
        return;
      }
      try {
        return this.replacement = this.fs.readFileSync(that, 'utf8').replace(/([\s\S]*)\n$/, '$1');
      } catch (e$) {
        e = e$;
        this.error("Error: No such file '" + this.options.replaceFile + "'.");
        this.exit(2);
      }
    }), isReplace(function(){
      return this.options.replace != null || this.options.replaceFunc;
    }), handleReplace(function(){
      var that;
      if ((that = isReplace) != null) {
        return this.replacement = that;
      } else {
        return this.handleReplaceFile();
      }
    })
  ];
}).call(this);
