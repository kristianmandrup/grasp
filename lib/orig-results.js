// Generated by LiveScript 1.5.0
(function(){
  var hasFilter, QueryMaker, makeQuery, queryResults, getOrigResults;
  hasFilter = require('./utils').hasFilter;
  QueryMaker = (function(){
    QueryMaker.displayName = 'QueryMaker';
    var prototype = QueryMaker.prototype, constructor = QueryMaker;
    function QueryMaker(queryEngine, node){
      this.queryEngine = queryEngine;
      this.node = node;
    }
    query(selector, backupSelector)(function(){
      var e;
      try {
        return this.queryEngine.query(selector, node);
      } catch (e$) {
        e = e$;
        return this.queryEngine.query(backupSelector, node);
      }
    });
    return QueryMaker;
  }());
  makeQuery = function(queryEngine, node){
    return new QueryMaker(queryEngine, node);
  };
  queryResults = function(queryEngine, node, selector){
    var that, ref$;
    if (that = (ref$ = node._named) != null ? ref$[selector] : void 8) {
      return function(){
        return [].concat(that);
      };
    } else {
      return function(replacementArg){
        var querier;
        querier = makeQuery(queryEngine, node);
        return querier.query(selector, replacementArg);
      };
    }
  };
  getOrigResults = function(queryEngine, node, selector, filterArg){
    if (hasFilter(filterArg)) {
      return function(){
        return [node];
      };
    } else {
      return queryResults(queryEngine, node, selector);
    }
  };
}).call(this);
