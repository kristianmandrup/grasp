// Generated by LiveScript 1.5.0
(function(){
  var Runner, ref$, exit, getArgs, setReplace, createRunner;
  Runner = require('./runner');
  ref$ = require('./utils'), exit = ref$.exit, getArgs = ref$.getArgs, setReplace = ref$.setReplace;
  createRunner = function(arg$){
    var args, input, exit, actions, opts;
    args = arg$.args, input = arg$.input, exit = arg$.exit, actions = arg$.actions, opts = arg$.opts;
    return new Runner({
      args: args,
      input: input,
      exit: exit,
      actions: actions,
      opts: opts
    }).run();
  };
  module.exports = {
    VERSION: version,
    search: curry$(function(engine, selector, input, opts){
      var ref$, code, args;
      if (typeof selector === 'object') {
        ref$ = selector, selector = ref$.selector, code = ref$.code, opts = ref$.opts;
        selector == null && (selector = selector.find || selector.query || selector.select);
        input == null && (input = selector.code);
      }
      args = getArgs(engine, selector);
      return createRunner({
        input: input,
        exit: exit,
        opts: opts,
        actions: actions,
        data: true
      }).run();
    }),
    replace: curry$(function(engine, selector, replacement, input, opts){
      var actions, ref$, args;
      actions = null;
      if (typeof selector === 'object') {
        ref$ = selector, selector = ref$.selector, replacement = ref$.replacement, input = ref$.input, actions = ref$.actions, opts = ref$.opts;
        selector == null && (selector = selector.find || selector.query || selector.select);
        input == null && (input = selector.code);
        replacement == null && (replacement = selector.replace);
      }
      args = getArgs(engine, selector);
      setReplace(args, replacement);
      return createRunner({
        args: args,
        input: input,
        exit: exit,
        actions: actions,
        opts: opts
      }).run();
    })
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
