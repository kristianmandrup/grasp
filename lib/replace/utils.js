// Generated by LiveScript 1.5.0
(function(){
  var levn, filterRegex, getArgs, hasFilter, parseFilters, getFilters, getRaw, slice$ = [].slice;
  levn = require('levn');
  filterRegex = /\s+\|\s+([-a-zA-Z]+)((?:\s+(?:'(?:\\'|[^'])*'|"(?:\\"|[^"])*"|[^\|\s]+))*)/;
  getArgs = function(filters){
    var argsStr;
    argsStr = filters.shift().trim();
    argsStr += filters.shift();
    return levn.parse('Array', argsStr);
  };
  hasFilter = function(txt){
    return /^\s*\|\s+/.test(txt);
  };
  parseFilters = function(filterStr){
    var ref$, filters, selector;
    filterStr = filterStr.trim();
    if (typeof hasFilter == 'function' && hasFilter(filterStr)) {
      return ref$ = (" " + filterStr).split(filterRegex), filters = slice$.call(ref$, 1), ref$;
    } else {
      return ref$ = filterStr.split(filterRegex), selector = ref$[0], filters = slice$.call(ref$, 1), ref$;
    }
  };
  getFilters = function(filterArg){
    if (Array.isArray(filterArg)) {
      filterArg;
    }
    return parseFilters(filterArg);
  };
  getRaw = function(input, node){
    var raw, that, prependStr, appendStr;
    raw = (that = node.raw)
      ? that
      : node.start != null
        ? input.slice(node.start, node.end)
        : node.key != null && node.value != null ? input.slice(node.key.start, node.value.end) : '';
    node.raw = raw;
    prependStr = node.rawPrepend || '';
    appendStr = node.rawAppend || '';
    return prependStr + "" + raw + appendStr;
  };
  module.exports = {
    getRaw: getRaw,
    getFilters: getFilters,
    getArgs: getArgs
  };
}).call(this);
