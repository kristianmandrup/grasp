// Generated by LiveScript 1.5.0
(function(){
  var getFilters, getOrigResults, replacer;
  getFilters = require('./utils').getFilters;
  getOrigResults = require('./orig-results').getOrigResults;
  replacer = function(input, node, queryEngine){
    return function(arg$, replacementArg, filterArg){
      var ref$, selector, filters, origResults, results, raw, join, textOperations, filterName, args, res$, i$, len$, result, output;
      filterArg = filterArg || replacementArg;
      ref$ = getFilters(filterArg), selector = ref$[0], filters = ref$[1];
      origResults = getOrigResults(queryEngine, node, selector, filterArg)(replacementArg);
      if (origResults.length) {
        results = origResults;
        raw = {
          prepend: '',
          append: ''
        };
        join = null;
        textOperations = [];
        while (filters.length) {
          filterName = filters.shift();
          args = getArgs(filters);
          filter(filterName, args, {
            raw: raw,
            results: results,
            textOperations: textOperations
          });
        }
        res$ = [];
        for (i$ = 0, len$ = results.length; i$ < len$; ++i$) {
          result = results[i$];
          res$.push(getRaw(input, result));
        }
        raw.results = res$;
        output = raw + ".prepend" + (join != null
          ? rawResults.join(join)
          : raw.results[0]) + raw + ".append";
        if (textOperations.length) {
          return fold(curry$(function(x$, y$){
            return y$(x$);
          }), output, textOperations);
        } else {
          return output;
        }
      } else {
        return '';
      }
    };
  };
  module.exports = {
    replacer: replacer
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
