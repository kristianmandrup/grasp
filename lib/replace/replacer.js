// Generated by LiveScript 1.5.0
(function(){
  var getFilters, getOrigResults, processFilters, makeOutput, getOutput, processOrig, replacer;
  getFilters = require('./utils').getFilters;
  getOrigResults = require('./orig-results').getOrigResults;
  processFilters = function(arg$){
    var filters, actions, raw, filterName, args, results$ = [];
    filters = arg$.filters, actions = arg$.actions, raw = arg$.raw;
    while (filters.length) {
      filterName = filters.shift();
      args = getArgs(filters);
      results$.push(filter(filterName, args, {
        raw: raw,
        results: results,
        textOperations: textOperations,
        actions: actions
      }));
    }
    return results$;
  };
  makeOutput = function(operations, output){
    if (textOperations.length) {
      return fold(curry$(function(x$, y$){
        return y$(x$);
      }), output, textOperations);
    } else {
      return output;
    }
  };
  getOutput = function(arg$){
    var raw, join, output;
    raw = arg$.raw, join = arg$.join;
    return output = raw + ".prepend" + (join != null
      ? raw.results.join(join)
      : raw.results[0]) + raw + ".append";
  };
  processOrig = function(origResults, filters, actions){
    var results, raw, join, textOperations, res$, i$, len$, result, output;
    results = origResults;
    raw = {
      prepend: '',
      append: ''
    };
    join = null;
    textOperations = [];
    processFilters({
      results: results,
      filters: filters,
      raw: raw,
      actions: actions,
      textOperations: textOperations
    });
    res$ = [];
    for (i$ = 0, len$ = results.length; i$ < len$; ++i$) {
      result = results[i$];
      res$.push(getRaw(input, result));
    }
    raw.results = res$;
    output = getOutput({
      raw: raw,
      join: join
    });
    return makeOutput(textOperations, output);
  };
  replacer = function(input, node, queryEngine, actions){
    return function(arg$, replacementArg){
      var ref$, selector, filters, origResults;
      ref$ = extractReplacement(replacementArg), selector = ref$[0], filters = ref$[1];
      origResults = getOrigResults(queryEngine, node, selector, filterArg)(replacementArg);
      if (origResults.length) {
        return processOrig(origResults, filters, actions);
      } else {
        return '';
      }
    };
  };
  module.exports = {
    replacer: replacer
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
