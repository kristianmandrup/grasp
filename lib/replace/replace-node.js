// Generated by LiveScript 1.5.0
(function(){
  var getReplacementFunc, lines, replaceNode, ReplaceNode, slice$ = [].slice;
  getReplacementFunc = require('./replacement').getReplacementFunc;
  lines = require('prelude-ls').lines;
  replaceNode = function(node){};
  module.exports = ReplaceNode = (function(){
    ReplaceNode.displayName = 'ReplaceNode';
    var prototype = ReplaceNode.prototype, constructor = ReplaceNode;
    function ReplaceNode(arg$){
      var actions;
      this.nodes = arg$.nodes, this.input = arg$.input, this.replacement = arg$.replacement, this.queryEngine = arg$.queryEngine, actions = arg$.actions;
      this.inputLines = lines(this.input);
      this.colOffset = 0;
      this.lineOffset = 0;
      this.lastLine = null;
      this.prevNode = {
        end: 0
      };
      this.replaceNode = getReplacementFunc(this.replacement, this.input, this.queryEngine, actions);
    }
    iterate(function(){
      var i$, ref$, len$, node, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.nodes).length; i$ < len$; ++i$) {
        node = ref$[i$];
        if (node.start < prevNode.end) {
          continue;
        }
        results$.push(this.process(node));
      }
      return results$;
    });
    process(node)(function(){
      var ref$, start, end;
      ref$ = node.loc, start = ref$.start, end = ref$.end;
      this.startLineNum = start.line - 1 + this.lineOffset;
      this.endLineNum = end.line - 1 + this.lineOffset;
      this.numberOfLines = this.endLineNum - this.startLineNum + 1;
      this.colOffset = this.lastLine === this.startLineNum ? this.colOffset : 0;
      this.startCol = start.column + this.colOffset;
      this.endCol = end.column + (this.startLineNum === this.endLineNum ? this.colOffset : 0);
      this.replaceLines = lines(this.process(node));
      this.startLine = this.inputLines[this.startLineNum];
      this.endLine = this.inputLines[this.endLineNum];
      this.startContext = this.startLine.slice(0, this.startCol);
      this.endContext = this.endLine.slice(this.endCol);
      this.replaceLines[0] = this + "start-context" + ((ref$ = this.replaceLines[0]) != null ? ref$ : '');
      this.replaceLast = (ref$ = this.replaceLines)[ref$.length - 1];
      this.endLen = this.replaceLast.length;
      (ref$ = this.replaceLines)[ref$.length - 1] = this + "replace-last" + this + "end-context";
      (ref$ = this.inputLines).splice.apply(ref$, [this.startLineNum, this.numberOfLines].concat(slice$.call(this.replaceLines)));
      this.lineOffset += this.replaceLines.length - this.numberOfLines;
      this.colOffset += this.endLen - this.endCol;
      this.lastLine = this.endLineNum + this.lineOffset;
      return this.prevNode = node;
    });
    return ReplaceNode;
  }());
}).call(this);
