// Generated by LiveScript 1.5.0
(function(){
  var doEach, append, prepend;
  doEach = function(args, result){
    var i$, ref$, len$, ref1$, pre, post, results$ = [], results1$ = [], results2$ = [];
    switch (args[0]) {
    case 'before':
      for (i$ = 0, len$ = (ref$ = results).length; i$ < len$; ++i$) {
        result = ref$[i$];
        results$.push(result.raw.prepend = args[1] + "" + ((ref1$ = result.raw.prepend) != null ? ref1$ : ''));
      }
      return results$;
      break;
    case 'after':
      for (i$ = 0, len$ = (ref$ = results).length; i$ < len$; ++i$) {
        result = ref$[i$];
        results1$.push(result.raw.append = ((ref1$ = result.raw.append) != null ? ref1$ : '') + "" + args[1]);
      }
      return results1$;
      break;
    case 'wrap':
      ref$ = args.length === 2
        ? [args[1], args[1]]
        : [args[1], args[2]], pre = ref$[0], post = ref$[1];
      for (i$ = 0, len$ = (ref$ = results).length; i$ < len$; ++i$) {
        result = ref$[i$];
        result.raw.prepend = pre + "" + ((ref1$ = result.raw.prepend) != null ? ref1$ : '');
        results2$.push(result.raw.append = ((ref1$ = result.raw.append) != null ? ref1$ : '') + "" + post);
      }
      return results2$;
      break;
    default:
      throw new Error("'" + args[0] + "' is not supported by 'each'");
    }
  };
  append = function(results, arg){
    return results.push({
      type: 'Raw',
      raw: arg + ""
    });
  };
  prepend = function(results, arg){
    return results.unshift({
      type: 'Raw',
      raw: arg + ""
    });
  };
  module.exports = [
    prepend(function(){
      var i$, ref$, len$, arg, results$ = [];
      for (i$ = 0, len$ = (ref$ = args).length; i$ < len$; ++i$) {
        arg = ref$[i$];
        results$.push(prepend(this.results, arg));
      }
      return results$;
    }), append(function(){
      var i$, ref$, len$, arg, results$ = [];
      for (i$ = 0, len$ = (ref$ = args).length; i$ < len$; ++i$) {
        arg = ref$[i$];
        results$.push(append(this.results, arg));
      }
      return results$;
    }), each(function(){
      if (this.args.length < 2) {
        throw new Error("No arguments supplied for 'each " + this.args[0] + "'");
      }
      return doEach(this.args, this.result);
    }), nth(function(){
      var n;
      n = +this.args[0];
      return this.results = this.results.slice(n, n + 1);
    }), nthLast(function(){
      var n;
      n = this.results.length - +this.args[0] - 1;
      return this.results = this.results.slice(n, n + 1);
    }), first(function(){
      return this.results = this.results.slice(0, 1);
    }), tail(function(){
      return this.results = this.results.slice(1);
    }), last(function(){
      var len;
      len = this.results.length;
      return this.results = this.results.slice(len - 1, len);
    }), initial(function(){
      return this.results = results.slice(0, results.length - 1);
    }), slice(function(){
      return this.results = [].slice.apply(results, args);
    }), reverse(function(){
      return this.results.reverse();
    })
  ];
}).call(this);
