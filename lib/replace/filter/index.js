// Generated by LiveScript 1.5.0
(function(){
  var ref$, lines, unlines, filter, fold, capitalize, camelize, dasherize, Filter;
  ref$ = require('prelude-ls'), lines = ref$.lines, unlines = ref$.unlines, filter = ref$.filter, fold = ref$.fold, capitalize = ref$.capitalize, camelize = ref$.camelize, dasherize = ref$.dasherize;
  Filter = require('./clazz');
  filter = function(name, args, arg$){
    var raw, results, textOperations, join, opFilter, e, argsStr;
    raw = arg$.raw, results = arg$.results, textOperations = arg$.textOperations;
    if (!args.length && (name === 'prepend' || name === 'before' || name === 'after' || name === 'prepend' || name === 'append' || name === 'wrap' || name === 'nth' || name === 'nth-last' || name === 'slice' || name === 'each' || name === 'replace' || name === 'substring' || name === 'substr' || name === 'str-slice')) {
      throw new Error("No arguments supplied for '" + filterName + "' filter");
    } else if (in$(name, ['replace']) && args.length < 2) {
      throw new Error("Must supply at least two arguments for '" + filterName + "' filter");
    }
    join = null;
    opFilter = new Filter({
      name: name,
      args: args,
      join: join,
      raw: raw,
      results: results,
      textOperations: textOperations
    });
    try {
      return opFilter[name];
    } catch (e$) {
      e = e$;
      argsStr = args ? args : '';
      throw new Error("Invalid filter: " + name + argsStr);
    }
  };
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
