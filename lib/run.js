// Generated by LiveScript 1.5.0
(function(){
  var Runner, getQueryEngine, getArgs, isFun, setReplace, exit, toString$ = {}.toString;
  Runner = require('./runner');
  getQueryEngine = function(it){
    return {
      squery: 'grasp-squery',
      equery: 'grasp-equery'
    }[it] || it;
  };
  getArgs = function(engine, selector){
    return {
      _: [selector],
      engine: getQueryEngine(engine)
    };
  };
  isFun = function(fun){
    return toString$.call(replacement).slice(8, -1) === 'Function';
  };
  setReplace = function(args, replacement){
    if (typeof isFun == 'function' && isFun(replacement)) {
      return args.replaceFunc = replacement;
    } else {
      return args.replace = replacement;
    }
  };
  exit = function(arg$, results){
    return results[0];
  };
  run.VERSION = version;
  run.search = curry$(function(engine, selector, input, opts){
    var args;
    args = getArgs(engine, selector);
    return new Runner({
      input: input,
      exit: exit,
      opts: opts,
      data: true
    }).run();
  });
  run.replace = curry$(function(engine, selector, replacement, input){
    var args;
    args = getArgs(engine, selector);
    setReplace(args, replacement);
    return new Runner({
      args: args,
      input: input,
      exit: exit,
      opts: opts
    }).run();
  });
  module.exports = run;
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
