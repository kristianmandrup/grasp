// Generated by LiveScript 1.5.0
(function(){
  var Logger, Search, slice$ = [].slice;
  Logger = require('../logger');
  module.exports = Search = (function(){
    Search.displayName = 'Search';
    var prototype = Search.prototype, constructor = Search;
    importAll$(prototype, arguments[0]);
    function Search(arg$){
      this.console = arg$.console, this.callCallback = arg$.callCallback, this.callback = arg$.callback, this.options = arg$.options, this.parsed = arg$.parsed;
      this.resultsData = [];
      this.resultsFormat = 'default';
      this.out = function(it){
        this.resultsData.push(it);
        if (this.callCallback) {
          this.callback(it);
        }
      };
    }
    setCount(function(){
      var that;
      return this.count = (that = this.options.maxCount) != null
        ? min(that, this.results.length)
        : this.results.length;
    });
    setResults(function(){
      var sortedResults;
      sortedResults = sortWith(resultsSortFunc, this.results);
      return this.slicedResults = slice$.call(sortedResults, 0, count);
    });
    handleReplacement(function(){
      var replaced, e;
      if (this.replacement == null) {
        return;
      }
      try {
        replaced = replace(replacement, cleanInput, slicedResults, queryEngine);
        if (options.to || options.inPlace) {
          this.resultsFormat = 'pairs';
          return this.out([name, replaced]);
        } else {
          return this.out(replaced);
        }
      } catch (e$) {
        e = e$;
        return this.error(name + ": Error during replacement. " + e.message + ".");
      }
    });
    handleCount(function(){
      if (!this.options.count) {
        return;
      }
      if (this.options.displayFilename) {
        if (this.options.json || data) {
          this.resultsFormat = 'pairs';
          return this.out([name, count]);
        } else {
          return this.out(formatCount(color, count, name));
        }
      } else {
        return this.out(this.options.json || data
          ? count
          : formatCount(color, count));
      }
    });
    handleFileMatching(function(){
      if (!(this.options.filesWithoutMatch || this.options.filesWithMatches)) {
        return;
      }
      if (this.options.filesWithMatches && count || this.options.filesWithoutMatch && !count) {
        return this.out(this.options.json || data
          ? name
          : formatName(color, name));
      }
    });
    handlePairs(function(){
      if (!this.options.displayFilename) {
        return;
      }
      this.resultsFormat = 'pairs';
      return this.out([this.name, this.slicedResults]);
    });
    handleLists(function(){
      this.resultsFormat = 'lists';
      return this.out(this.slicedResults);
    });
    handleJsonData(function(){
      if (!(this.options.json || this.data)) {
        return;
      }
      return this.handlePairs() || this.handleLists();
    });
    handleInputData(function(){
      var inputLines, i$, ref$, len$, result, results$ = [];
      inputLines = lines(this.cleanInput);
      for (i$ = 0, len$ = (ref$ = this.slicedResults).length; i$ < len$; ++i$) {
        result = ref$[i$];
        results$.push(this.out(formatResult(name, inputLines, inputLines.length, textFormatFuncs, options, result)));
      }
      return results$;
    });
    handleData(function(){
      return this.handleJsonData() || this.handleInputData();
    });
    parseInput(function(){
      var e;
      this.cleanInput = this.input.replace(/^#!.*\n/, '');
      try {
        this.time("parse-input:" + name);
        this.parsed.input = parser.parse(cleanInput, parserOptions);
        this.timeEnd("parse-input:" + name);
        if (this.options.printAst) {
          return this.log(JSON.stringify(this.parsed.input, null, 2));
        }
      } catch (e$) {
        e = e$;
        throw new Error("Error: Could not parse JavaScript from '" + name + "'. " + e.message);
      }
    });
    query(function(){
      this.time("query:" + name);
      this.results = this.queryEngine.queryParsed(this.parsed.selector, this.parsed.input);
      return this.timeEnd("query:" + name);
    });
    search(Search.name, Search.input)(function(){
      this.time("search-total:" + name);
      this.parseInput();
      this.query();
      this.setCount();
      this.setResults();
      this.handleReplacement() || this.handleCount() || this.handleFileMatching() || handleData();
      this.timeEnd("search-total:" + name);
    });
    return Search;
  }(Logger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
