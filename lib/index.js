// Generated by LiveScript 1.5.0
(function(){
  var path, acorn, squery, equery, async, minimatch, ref$, min, sortWith, lines, chars, split, join, map, Obj, format, formatResult, formatName, formatCount, replace, parseOptions, generateHelp, generateHelpForOption, help, _console, search, searchTarget, getQueryEngine, getDisplayFilename, resultsSortFunc, processResults, getToMap, end, toString$ = {}.toString;
  path = require('path');
  acorn = require('acorn');
  squery = require('grasp-squery');
  equery = require('grasp-equery');
  async = require('async');
  minimatch = require('minimatch');
  ref$ = require('prelude-ls'), min = ref$.min, sortWith = ref$.sortWith, lines = ref$.lines, chars = ref$.chars, split = ref$.split, join = ref$.join, map = ref$.map, Obj = ref$.Obj;
  format = require('./format'), formatResult = format.formatResult, formatName = format.formatName, formatCount = format.formatCount;
  replace = require('./replace').replace;
  ref$ = require('./options'), parseOptions = ref$.parse, generateHelp = ref$.generateHelp, generateHelpForOption = ref$.generateHelpForOption;
  help = require('./help');
  _console = console;
  search = require('./search');
  ref$ = require('./utils'), searchTarget = ref$.searchTarget, getQueryEngine = ref$.getQueryEngine, getDisplayFilename = ref$.getDisplayFilename;
  resultsSortFunc = function(a, b){
    var aStart, bStart, lineDiff;
    aStart = a.loc.start;
    bStart = b.loc.start;
    lineDiff = aStart.line - bStart.line;
    if (lineDiff === 0) {
      return aStart.column - bStart.column;
    } else {
      return lineDiff;
    }
  };
  processResults = function(){
    if (resultsData.length) {
      if (resultsFormat === 'pairs') {
        return Obj.pairsToObj(resultsData);
      } else if (resultsFormat === 'lists') {
        if (targetsLen === 1) {
          return resultsData[0];
        } else {
          return resultsData;
        }
      } else {
        return resultsData;
      }
    } else {
      return [];
    }
  };
  getToMap = function(inputPaths){
    var mapping, i$, len$, inputPath;
    if (options.inPlace) {
      return Obj.listsToObj(inputPaths, inputPaths);
    } else if (toString$.call(options.to).slice(8, -1) === 'Object') {
      return options.to;
    } else {
      mapping = {};
      for (i$ = 0, len$ = inputPaths.length; i$ < len$; ++i$) {
        inputPath = inputPaths[i$];
        mapping[inputPath] = options.to.replace(/%/, path.basename(inputPath, path.extname(inputPath)));
      }
      return mapping;
    }
  };
  end = function(inputPaths){
    var exitCode, processedResults, toMap, inputPath, contents, targetPath, jsonString;
    exitCode = resultsData.length ? 0 : 1;
    processedResults = processResults();
    if (replacement && options.to || options.inPlace) {
      toMap = getToMap(inputPaths);
      for (inputPath in processedResults) {
        contents = processedResults[inputPath];
        targetPath = toMap[inputPath];
        if (targetPath === '-') {
          callback(contents);
        } else {
          if (targetPath) {
            fs.writeFileSync(targetPath, contents);
          }
        }
      }
    } else if (options.json) {
      jsonString = JSON.stringify(processedResults);
      callback(jsonString);
    }
    if (debug) {
      console.timeEnd('everything');
    }
    return exit(exitCode, options.json ? jsonString : processedResults);
  };
}).call(this);
